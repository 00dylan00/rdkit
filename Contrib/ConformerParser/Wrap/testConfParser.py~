from rdkit import Chem
from rdkit.Chem import rdConfParser
from rdkit import RDConfig
import unittest
import os
from rdkit.RDLogger import logger
logger=logger()

def feq(v1, v2, tol=1.e-4) :
    return abs(v1-v2) < tol

def lstEq(l1, l2, tol=1.0e-4) :
    ln = len(l1)
    if (ln != len(l2) ) :
        return 0

    for i in range(ln) :
        if abs(l1[i] - l2[i]) > tol :
            return 0
    return 1



class TestCase(unittest.TestCase) :
    def setUp(self):
        pass

    def testReadAmberTraj(self):
        fileN = os.path.join(RDConfig.RDBaseDir,'Code','GraphMol','ConformerParser',
                                            'test_data','water_coords.trx')
        mol = Chem.MolFromSmiles('O')
        mol = Chem.AddHs(mol)
        ids = rdConfParser.AddConformersFromAmberTrajectory(mol, fileN)
        self.failUnless(mol.GetNumConformers() == 1)
        self.failUnless(len(ids) == 1)
        self.failUnless(ids[0] == 0)

        fileN = os.path.join(RDConfig.RDBaseDir,'Code','GraphMol','ConformerParser',
                                            'test_data','water_coords2.trx')
        ids = rdConfParser.AddConformersFromAmberTrajectory(mol, fileN, clearConfs=True)
        self.failUnless(mol.GetNumConformers() == 2)
        ids = rdConfParser.AddConformersFromAmberTrajectory(mol, fileN, clearConfs=False)
        self.failUnless(mol.GetNumConformers() == 4)
        ids = rdConfParser.AddConformersFromAmberTrajectory(mol, fileN, numConfs=1, clearConfs=True)
        self.failUnless(mol.GetNumConformers() == 1)
        
            
if __name__ == '__main__':
  unittest.main()
